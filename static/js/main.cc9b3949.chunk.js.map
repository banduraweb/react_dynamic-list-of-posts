{"version":3,"sources":["components/PostsList/PostsLists.constants.js","components/PostsList/PostsLists.fetch.js","components/Post/Post.constants.js","components/User/User.js","components/SingleComment/SingleComment.js","components/Comments/Comments.js","components/Post/Post.js","components/PostsList/PostsList.js","App.js","index.js"],"names":["PostsLists_constants","POSTS","USERS","COMMENTS","PostsLists_fetch","url","fetch","then","response","json","URL_IMG","0","1","2","User","_ref","currentUser","name","email","address","react_default","a","createElement","Fragment","city","SingleComment","comment","body","Comment","Group","Avatar","as","src","Content","Author","Metadata","Icon","Text","Comments","currentComments","map","SingleComment_SingleComment","key","id","Post","postData","user","comments","Image","Math","floor","random","wrapped","ui","Card","Header","User_User","title","Meta","className","Description","Comments_Comments","extra","PostsList","initialState","loading","load","preparedData","inputValue","_useState","useState","_useState2","Object","slicedToArray","state","setState","useEffect","setTimeout","_ref2","_ref3","usersFromServer","postsFromServer","commentsFromServer","regenerator_default","async","_context","prev","next","awrap","Promise","all","getData","sent","objectSpread2","post","find","userId","filter","postId","stop","renderPosts","_ref4","toLowerCase","includes","Dimmer","active","Loader","size","Input","onChange","event","searchValue","target","value","trim","icon","placeholder","currentPost","Post_Post","App","isLoading","setLoading","PostsList_PostsList","Button","onClick","primary","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.cc9b3949.chunk.js","sourcesContent":["export default {\n  POSTS: 'https://jsonplaceholder.typicode.com/posts',\n  USERS: 'https://jsonplaceholder.typicode.com/users',\n  COMMENTS: 'https://jsonplaceholder.typicode.com/comments',\n};\n","export default function(url) {\n  return fetch(url).then(response => response.json());\n}\n","export const URL_IMG = {\n  0: 'https://react.semantic-ui.com/images/avatar/large/matthew.png',\n  1: 'https://react.semantic-ui.com/images/avatar/large/elliot.jpg',\n  2: 'https://react.semantic-ui.com/images/avatar/large/daniel.jpg',\n};\n","import React from 'react';\n\nfunction User({ currentUser }) {\n  const { name, email, address } = currentUser;\n\n  return (\n    <>\n      <p>{name}</p>\n      <p>\n@:\n        {email}\n      </p>\n      <p>\ncity:\n        {address.city}\n      </p>\n    </>\n  );\n}\n\nexport default User;\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Comment, Icon } from 'semantic-ui-react';\n\nfunction SingleComment({ comment }) {\n  const { name, email, body } = comment;\n\n  return (\n    <>\n      <Comment.Group>\n        <Comment>\n          <Comment.Avatar\n            as=\"a\"\n            src=\"https://react.semantic-ui.com/images/avatar/small/stevie.jpg\"\n          />\n          <Comment.Content>\n            <Comment.Author>\n              {name}\n              <p />\n              {email}\n            </Comment.Author>\n            <Comment.Metadata>\n              <div>2 days ago</div>\n              <div>\n                <Icon name=\"star\" />\n5 Faves\n              </div>\n            </Comment.Metadata>\n            <Comment.Text>\n              {body}\n            </Comment.Text>\n          </Comment.Content>\n        </Comment>\n      </Comment.Group>\n    </>\n  );\n}\n\nexport default SingleComment;\n","import React from 'react';\nimport SingleComment from '../SingleComment/SingleComment';\n\nfunction Comments({ currentComments }) {\n  return (\n    <>\n      {currentComments.map(comment => (\n        <SingleComment\n          key={comment.id}\n          comment={comment}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default Comments;\n","import React from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { URL_IMG } from './Post.constants';\nimport User from '../User/User';\nimport Comments from '../Comments/Comments';\n\nfunction Post({ postData }) {\n  const { user, comments } = postData;\n\n  return (\n    <>\n      <Image src={URL_IMG[Math.floor(Math.random() * (3 + 1 - 1))]} wrapped ui={false} />\n      <Card.Content>\n        <Card.Header><User currentUser={user} /></Card.Header>\n        <p />\n        <Card.Header>{postData.title}</Card.Header>\n        <Card.Meta>\n          <p className=\"date\">\nPost id\n            {postData.id}\n          </p>\n          <p className=\"date\">{postData.body}</p>\n          <p className=\"date\">\nJoined in 20\n            {Math.floor(10 + Math.random() * (19 + 1 - 10))}\n          </p>\n        </Card.Meta>\n        <Card.Description>\n          <Comments currentComments={comments} />\n        </Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <a>\n          <Icon name=\"user\" />\n          {Math.floor(Math.random() * (100 + 1 - 1))}\n          {' '}\nFriends\n        </a>\n      </Card.Content>\n    </>\n  );\n}\n\nexport default Post;\n","import React, { useState, useEffect } from 'react';\nimport { Dimmer, Loader, Card, Input } from 'semantic-ui-react';\nimport url from './PostsLists.constants';\nimport getData from './PostsLists.fetch';\nimport Post from '../Post/Post';\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction PostsList({ load }) {\n  const initialState = {\n    loading: load,\n    preparedData: [],\n    inputValue: '',\n  };\n\n  const [state, setState] = useState(initialState);\n\n  useEffect(() => {\n    const fetchData = async() => {\n      const [\n        usersFromServer,\n        postsFromServer,\n        commentsFromServer,\n      ] = await Promise.all([\n        getData(url.USERS),\n        getData(url.POSTS),\n        getData(url.COMMENTS),\n      ]);\n\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        preparedData: postsFromServer.map(post => ({\n          ...post,\n          user: usersFromServer.find(user => user.id === post.userId),\n          comments: commentsFromServer\n            .filter(comment => comment.postId === post.id),\n        })),\n      }));\n    };\n\n    setTimeout(fetchData, 300);\n  }, []);\n\n  const SearchQuery = (event) => {\n    const searchValue = event.target.value.trim();\n\n    setState(prev => ({\n      ...prev,\n      inputValue: searchValue,\n    }));\n  };\n\n  const { loading, preparedData, inputValue } = state;\n\n  const renderPosts = inputValue === ''\n    ? preparedData\n    : preparedData\n      .filter(({ title, body }) => title\n        .toLowerCase().includes(inputValue)\n        || body.toLowerCase().includes(inputValue));\n\n  return (\n    <>\n      {loading\n        ? (\n          <Dimmer active>\n            <Loader size=\"huge\">Preparing Files</Loader>\n          </Dimmer>\n        )\n        : (\n          <>\n            <Input\n              onChange={SearchQuery}\n              icon=\"search\"\n              placeholder=\"Search...\"\n            />\n            <Card className=\"test\">\n              {renderPosts.map(currentPost => (\n                <Post\n                  key={currentPost.id}\n                  postData={currentPost}\n                />\n              ))}\n            </Card>\n          </>\n        )}\n\n    </>\n  );\n}\n\nexport default PostsList;\n","import React, { useState } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport { Button } from 'semantic-ui-react';\nimport PostList from './components/PostsList/PostsList';\n\nfunction App() {\n  const [isLoading, setLoading] = useState(false);\n  const startLoadTodos = () => {\n    setLoading(true);\n  };\n\n  return (\n    <div className=\"main-wrapper\">\n      {!isLoading\n        ? (\n          <Button\n            onClick={startLoadTodos}\n            primary\n            size=\"huge\"\n          >\nGet Started!\n          </Button>\n        )\n        : <PostList load={isLoading} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}